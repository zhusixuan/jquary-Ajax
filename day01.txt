【注意】我们上课用的jquery库的版本是2.1.4,不同版本的jquery库会对其实的函数或者属性做不出不同程度的修改或者添加、删除,所以在之后的具体的操作中,最终还是要以当前版本的测试结果为准,但是它们的操作方式和思路几乎都是一样的,同时注意浏览器的兼容性问题

1. 发展历程:Javascript到jQuery：
	1) Javascript弊端：
		1.复杂的文档对象模型（DOM）
    	2.不一致的浏览器实现
    	3.缺乏便捷的开发调试工具-firebug
    2) Javascript库
        为了简化Javascript的开发，Javascript库封装了很多预定义的对象和使用函数。
    3) jQuery
        JQuery就是js的一个库(其实就是别人给我们封装好的js文件,简化我们平时的js中的代码操作)。jQuery 简洁的语法和跨平台的兼容性，极大的简化了Javascript开发人员遍历HTML文档，操作DOM，处理事件，执行动画和开发AJAX(Javascript + xml + json )，其理念：write less,do more
        jQuery优势：
			1 轻量级
		    2 强大的选择器 

		    3 出色的DOM操作的封装
		    	parent.appendChild(div)
		    	parent.append(div)
		    	div.appentTo(parent);

		    4 可靠的事件处理机制 
		    	bind()
		    5 完善的Ajax,$.ajax()无需关心复杂的浏览器兼容性和XMLHttpRequest对象的创建和使用
		    6 不污染顶级变量，只建立一个名为jQuery对象，其所有函数方法都在这个对象之下
		    7 出色的浏览器兼容性
		    8 链式操作方式，发生在同一个jquery对象上的一组动作，可以直接连写而不用重复获取对象
		    
		jQuery官网
			http://jquery.com/
		jQuery API中文文档
			http://www.css88.com（注意，使用哪个版本看哪个版本的API）
		jquery库类型
			一般jquery库都有两个，一个为学习版，一个为项目版
    		完整版本	：  jquery.js 		主要用于测试，学习和开发
   			mini版本	：  jquery.min.js 	主要用于产品和项目
2. jQuery的使用
  	jQuery不需要安装，想要在某个页面上使用jQuery时，只需要在相关的html中引入jQuery的库文件即可。
  	例如：
	  	<html>
	  		<head>
	  			<!--导入jquery库-->
	  			<script type="text/javascript" src="js/jquery-2.1.4/jquery.min.js"></script>
	  			<script type="text/javascript">
	  				//书写js代码
	  			</script>
	  		</head>
	  		<body>
	  			
	  		</body>
	  	</html>
3. jQuery函数
	jQuery库只提供了一个叫jQuery的函数，该函数中以及该函数的原型中定义了大量的方法，方便jQuery对象和jQuery函数调用。
	jQuery函数具有四种参数：
      	1) 参数为选择器（字符串）
       	 	jQuery函数通过该选择器获取对应的DOM，然后将这些DOM封装到一个jQuery对象中并返回
      	2) 参数为DOM对象(即Node的实例) 
      		jQuery函数将该DOM封装成jQuery对象并返回。
      	3) 参数为HTML文本字符串
        	jQuery函数会根据传入的文本创建好HTML元素并封装成jQuery对象返回
        	$("<div class='one'>one<div>");
      	4) 参数为一个匿名函数
	        $(function(){
		
			});
			当文档结构加载完毕之后jQuery函数调用匿名函数
4. jQuery对象
	1) jQuery对象是jQuery函数的一个实例，该对象可以调用jQuery原型中的方法,也就是我们后面学的很多方法，比如each,map,slice,first,find,filter,not,on,off,css等方法
	2) jQuery对象是一个类数组对象，数组中存放的是DOM对象
	3) jQuery对象的获取通常是使用选择器来获取。
		比如, 获取所有class为one的元素。
		$(".one")

5. jQuery对象与DOM对象
	是两种完全不一样的对象，jQuery对象是jQuery函数的实例，是一个类数组对象，而DOM对象是Node的实例。他们所能调用的方法完全不同。但是它们又有一定的关联性，jQuery对象的类数组的元素为DOM对象，对jQuery对象的操作实际上就是对jQuery数组中DOM对象的批量操作。jQeury对象和DOM对象可以相互转化
	1) DOM对象转换为jQuery对象
		var dom = document.getElementById("one");	//DOM对象，也就是Node的一个实例，或者说是HTMLElement的实例
		var $dom = jQuery(dom);	//将dom对象封装了jQuery对象

		dom.onclick = function(){};		//ok 	为dom元素绑定事件处理函数
		$dom.onclick = function(){};	//error	不能这样使用，因为jQuery对象没有这个属性
		$dom.click(function(){});
	2) jQuery对象转换为DOM对象
		var $doms = jQuery(".one");	//获取所有class为one的元素，可能有多个，$doms为jQuery对象
		var dom1 = $doms[0];		//获取封装在jQuery对象中的第一个dom对象，dom1为dom对象

6. jQuery选择器
	1) 基本选择器
		所有选择器	*
		标签选择器	标签名
   		ID选择器		#ID
  		类选择器		.className
   		群组选择器	selector1,selector2 
   			多个选择器使用,分割，取并集
   		复合选择器	selector1selector2	
   			多个选择器组合使用，取交集
   	2) 层次选择器
   		后代选择器	selector1 selector2
   			两个选择器使用空格隔开，表示可以获取当前元素的子代以及孙子代等后代元素
   		子代选择器	selector1>selector2
   			两个选择器使用>隔开，表示只能获取当前选中元素的子代元素
   	3) 兄弟选择器
   		下一个兄弟选择器	selector1+selector2
   			两个选择器使用+隔开，表示可以获取当前元素下一个兄弟元素，下一个兄弟元素要能符合selector2
   		之后所有兄弟选择器 selector1~selector2
   			两个选择器使用~隔开，表示可以获取当前元素之后的所有兄弟元素，之后所有兄弟元素要能符合selector2

 7. jQuery过滤器
 	【注意】jQuery的过滤器必须用在jQuery选择器后，表示对通过前面的jQuery选择器选择到的内容的过滤。是建立在前面选择器已经选择到元素的基础之上的。
 	1) 基本过滤器
		语法：selector:过滤器
		selector:first 		获取所有已选择到的元素中的第一个元素
		selector:last 		获取所有已选择到的元素中的最后一个元素
		selector:even 		获取所有已选择到的元素中的索引为偶数元素
		selector:odd 		获取所有已选择到的元素中的索引为奇数元素
		selector:eq(index) 	获取所有已选择到的元素中的索引为index的元素
		selector:lt(num)	获取所有已选择到的元素中的索引值小于num的元素
		selector:gt(num)	获取所有已选择到的元素中的索引值大于num的元素
		selector1:not(selector2)	获取所有已选择到的元素中的除了selector2的元素
		selector:header	标题h1~h6	获取所有已选择到的元素中的标题元素
	2) 内容过滤器
		语法：selector:过滤器			
		selector:contains(text);	获取所有已选择到的元素中文本包含text的元素
		selector:empty				获取所有已选择到的元素中空元素（没有子节点）
		selector:parent				获取所有已选择到的元素中非空元素（有子节点）
		$("div:parent")
		selector:has(selector2)		获取所有已选择到的元素中包含selector2元素的元素
		$("div:has('span')")
	3) 可见性过滤器
		语法：selector:过滤器
		隐藏类型
		1. 不占据屏幕空间
			display:none
			<input type="hidden">
			<head></head>
		2. 占据屏幕空间
			visibility:hidden
			透明度 0
		:visible
			选择所有占据屏幕空间的元素
		:hidden
			选择所有不占据屏幕空间的元素
	4) 属性过滤器
		语法：selector[属性过滤器]
		selector[attrKey]			获取所有已选择到的元素中具有属性attrKey的元素
		selector[attrKey=attrVal]	获取所有已选择到的元素中具有属性attrKey，并且属性值为attrVal的元素
		selector[attrKey^=attrVal]	获取所有已选择到的元素中具有属性attrKey，并且属性值为以attrVal开头的元素
		selector[attrKey$=attrVal]	获取所有已选择到的元素中具有属性attrKey，并且属性值为以attrVal结尾的元素
		selector[attrKey*=attrVal]	获取所有已选择到的元素中具有属性attrKey，并且属性值为包含attrVal的元素
		selector[attrKey!=attrVal]	获取所有已选择到的元素中具有属性attrKey，并且属性值不为以attrVal的元素或者没有属性attrKey的元素
		selector[attrKey1][attrKey2]
		$("div['class']['title']")
	5) 后代过滤器
		选择器一定要先选择到后代元素，是对选择到的后代元素的过滤,【注意】空格与>的区别
		$("div :nth-child")
		selector :nth-child(index)	获取每个selector元素中索引为index的子元素【注意】index从1开始
		selector :first-child		获取每个selector元素中第一个子元素（每个父元素的第一个子元素）
			注意与selector :first的区别，获取所有selector元素的子元素中的第一个（只有一个）
		selector :last-child		获取每个selector元素中第最后一个子元素（每个父元素的最后一个子元素）
		selector :only-child		获取每个selector元素中独生子子元素（每个父元素如果只有一个孩子元素，获取该元素）
		selector :first-of-type		获取每个selector元素中每种类型子元素中的第一个
		selector:last-of-type		获取每个selector元素中每种类型子元素中的最后一个

 	6) 表单过滤器：主要是对选择的表单元素进行过滤。
      	:enabled		
			选取所有可用元素该选择器仅可用于选择支持disabled属性（attribute）的HTML元素(<button>, <input>, <optgroup>, <option>, <select>, 和 <textarea>)。
      	:disabled		
        	选取所有不可用的元素该选择器也是仅可用于支持disabled属性的HTML元素
      	:checked		
        	选取所有被选中的元素，用于复选框和单选框,下拉框
      	:selected		
        	选取所有被选中的选项元素，该选择器只适用于<option>元素
        :focus
        	选择当前获取焦点的元素。
      	:input		
       		选取所有的<input><textarea><select><button>元素
			$(":input")现在可以让用户输入的标签元素
			$("input")选择名字为input的标签元素
      	:text		
			选取所有的单行文本框（<input type="text">）
      	:password		
      		选取所有的密码框
      	:radio		
      		选取所有的单选框
      	:checkbox		
      		选取所有的多选框
      	:submit		
      		选取所有的提交按钮
      	:image		
      		选取所有input类型为image的表单元素
      	:reset		
      		选取所有input类型为reset的表单元素
      	:button
      		选取所有input类型为button的表单元素
      	:file
      		选取所有input类型为file的表单元素